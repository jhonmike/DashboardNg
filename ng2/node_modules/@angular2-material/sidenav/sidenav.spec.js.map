{"version":3,"file":"sidenav.spec.js","sourceRoot":"","sources":["sidenav.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  fakeAsync,\n  inject,\n  injectAsync,\n  tick\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {XHR} from '@angular/compiler';\nimport {\n  Component,\n  Type,\n  ViewMetadata\n} from '@angular/core';\n\nimport {By} from '@angular/platform-browser';\nimport {MdSidenav, MdSidenavLayout, MD_SIDENAV_DIRECTIVES} from './sidenav';\n\n\nfunction fakeAsyncAdaptor(fn: () => void) {\n  return inject([], fakeAsync(fn));\n}\n\n\n/**\n * Create a ComponentFixture from the builder. This takes a template and a style for sidenav.\n */\nfunction createFixture(appType: Type, builder: TestComponentBuilder,\n    template: string, style: string): ComponentFixture<any> {\n  let fixture: ComponentFixture<any> = null;\n  // Remove the styles (which remove the animations/transitions).\n  builder\n    .overrideView(MdSidenavLayout, new ViewMetadata({\n      template: template,\n      styles: [style],\n      directives: [MdSidenav],\n    }))\n    .createAsync(appType).then((f: ComponentFixture<any>) => { fixture = f; });\n  tick();\n\n  return fixture;\n}\n\n\nfunction endSidenavTransition(fixture: ComponentFixture<any>) {\n  let sidenav: any = fixture.debugElement.query(By.directive(MdSidenav)).componentInstance;\n  sidenav.onTransitionEnd({\n    target: (<any>sidenav)._elementRef.nativeElement,\n    propertyName: 'transform'\n  });\n  fixture.detectChanges();\n}\n\n\nexport function main() {\n  describe('MdSidenav', () => {\n    let template: string;\n    let style: string;\n    let builder: TestComponentBuilder;\n\n    /**\n     * We need to get the template and styles for the sidenav in an Async test.\n     * FakeAsync would block indefinitely on the XHR if we were to create the component async-ly.\n     * See https://github.com/angular/angular/issues/5601.\n     * We do some style verification so styles have to match.\n     * But we remove the transitions so we only set the regular `sidenav.css` styling.\n     */\n    beforeEach(injectAsync([TestComponentBuilder, XHR], (tcb: TestComponentBuilder, xhr: XHR) => {\n      builder = tcb;\n\n      return Promise.all([\n        xhr.get('./components/sidenav/sidenav.html').then((t) => { template = t; }),\n        xhr.get('./components/sidenav/sidenav.css').then((css) => { style = css; })\n      ]).catch((err: any) => {\n        console.error(err);\n      });\n    }));\n\n    describe('methods', () => {\n      it('should be able to open and close', fakeAsyncAdaptor(() => {\n        let fixture = createFixture(BasicTestApp, builder, template, style);\n\n        let testComponent: BasicTestApp = fixture.debugElement.componentInstance;\n        let openButtonElement = fixture.debugElement.query(By.css('.open'));\n        openButtonElement.nativeElement.click();\n        fixture.detectChanges();\n        tick();\n\n        expect(testComponent.openStartCount).toBe(1);\n        expect(testComponent.openCount).toBe(0);\n\n        endSidenavTransition(fixture);\n        tick();\n\n        expect(testComponent.openStartCount).toBe(1);\n        expect(testComponent.openCount).toBe(1);\n        expect(testComponent.closeStartCount).toBe(0);\n        expect(testComponent.closeCount).toBe(0);\n\n        let sidenavElement = fixture.debugElement.query(By.css('md-sidenav'));\n        let sidenavBackdropElement = fixture.debugElement.query(By.css('.md-sidenav-backdrop'));\n        expect(getComputedStyle(sidenavElement.nativeElement).visibility).toEqual('visible');\n        expect(getComputedStyle(sidenavBackdropElement.nativeElement).visibility)\n          .toEqual('visible');\n\n        // Close it.\n        let closeButtonElement = fixture.debugElement.query(By.css('.close'));\n        closeButtonElement.nativeElement.click();\n        fixture.detectChanges();\n        tick();\n\n        expect(testComponent.openStartCount).toBe(1);\n        expect(testComponent.openCount).toBe(1);\n        expect(testComponent.closeStartCount).toBe(1);\n        expect(testComponent.closeCount).toBe(0);\n\n        endSidenavTransition(fixture);\n        tick();\n\n        expect(testComponent.openStartCount).toBe(1);\n        expect(testComponent.openCount).toBe(1);\n        expect(testComponent.closeStartCount).toBe(1);\n        expect(testComponent.closeCount).toBe(1);\n\n        expect(getComputedStyle(sidenavElement.nativeElement).visibility).toEqual('hidden');\n        expect(getComputedStyle(sidenavBackdropElement.nativeElement).visibility).toEqual('hidden');\n      }));\n\n      it('open/close() return a promise that resolves after animation end', fakeAsyncAdaptor(() => {\n        let fixture = createFixture(BasicTestApp, builder, template, style);\n        let sidenav: MdSidenav = fixture.debugElement\n          .query(By.directive(MdSidenav)).componentInstance;\n        let called = false;\n\n        sidenav.open().then(() => {\n          called = true;\n        });\n\n        expect(called).toBe(false);\n        endSidenavTransition(fixture);\n        tick();\n        expect(called).toBe(true);\n\n        called = false;\n        sidenav.close().then(() => {\n          called = true;\n        });\n\n        expect(called).toBe(false);\n        endSidenavTransition(fixture);\n        tick();\n        expect(called).toBe(true);\n\n      }));\n\n      it('open/close() twice returns the same promise', fakeAsyncAdaptor(() => {\n        let fixture = createFixture(BasicTestApp, builder, template, style);\n        let sidenav: MdSidenav = fixture.debugElement\n          .query(By.directive(MdSidenav)).componentInstance;\n\n        let promise = sidenav.open();\n        expect(sidenav.open()).toBe(promise);\n        fixture.detectChanges();\n        tick();\n\n        promise = sidenav.close();\n        expect(sidenav.close()).toBe(promise);\n        tick();\n      }));\n\n      it('open() then close() cancel animations when called too fast', fakeAsyncAdaptor(() => {\n        let fixture = createFixture(BasicTestApp, builder, template, style);\n        let sidenav: MdSidenav = fixture.debugElement\n          .query(By.directive(MdSidenav)).componentInstance;\n\n        let openCalled = false;\n        let openCancelled = false;\n        let closeCalled = false;\n\n        sidenav.open().then(() => { openCalled = true; }, () => { openCancelled = true; });\n\n        // We do not call transition end, close directly.\n        sidenav.close().then(() => { closeCalled = true; });\n\n        endSidenavTransition(fixture);\n        tick();\n\n        expect(openCalled).toBe(false);\n        expect(openCancelled).toBe(true);\n        expect(closeCalled).toBe(true);\n        tick();\n      }));\n\n      it('close() then open() cancel animations when called too fast', fakeAsyncAdaptor(() => {\n        let fixture = createFixture(BasicTestApp, builder, template, style);\n        let sidenav: MdSidenav = fixture.debugElement\n          .query(By.directive(MdSidenav)).componentInstance;\n\n        let closeCalled = false;\n        let closeCancelled = false;\n        let openCalled = false;\n\n        // First, open the sidenav completely.\n        sidenav.open();\n        endSidenavTransition(fixture);\n        tick();\n\n        // Then close and check behavior.\n        sidenav.close().then(() => { closeCalled = true; }, () => { closeCancelled = true; });\n        // We do not call transition end, open directly.\n        sidenav.open().then(() => { openCalled = true; });\n\n        endSidenavTransition(fixture);\n        tick();\n\n        expect(closeCalled).toBe(false);\n        expect(closeCancelled).toBe(true);\n        expect(openCalled).toBe(true);\n        tick();\n      }));\n\n      it('does not throw when created without a sidenav', fakeAsyncAdaptor(() => {\n        expect(() => {\n          let fixture = createFixture(SidenavLayoutNoSidenavTestApp, builder, template, style);\n          fixture.detectChanges();\n          tick();\n        }).not.toThrow();\n      }));\n\n      it('does throw when created with two sidenav on the same side', fakeAsyncAdaptor(() => {\n        expect(() => {\n          let fixture = createFixture(SidenavLayoutTwoSidenavTestApp, builder, template, style);\n          fixture.detectChanges();\n          tick();\n        }).toThrow();\n      }));\n    });\n  });\n}\n\n\n/** Test component that contains an MdSidenavLayout but no MdSidenav. */\n@Component({\n  selector: 'test-app',\n  directives: [MD_SIDENAV_DIRECTIVES],\n  template: `\n    <md-sidenav-layout>\n    </md-sidenav-layout>\n  `,\n})\nclass SidenavLayoutNoSidenavTestApp {\n}\n\n\n/** Test component that contains an MdSidenavLayout and 2 MdSidenav on the same side. */\n@Component({\n  selector: 'test-app',\n  directives: [MD_SIDENAV_DIRECTIVES],\n  template: `\n    <md-sidenav-layout>\n      <md-sidenav> </md-sidenav>\n      <md-sidenav> </md-sidenav>\n    </md-sidenav-layout>\n  `,\n})\nclass SidenavLayoutTwoSidenavTestApp {\n}\n\n\n/** Test component that contains an MdSidenavLayout and one MdSidenav. */\n@Component({\n  selector: 'test-app',\n  directives: [MD_SIDENAV_DIRECTIVES],\n  template: `\n    <md-sidenav-layout>\n      <md-sidenav #sidenav align=\"start\"\n                  (open-start)=\"openStart()\"\n                  (open)=\"open()\"\n                  (close-start)=\"closeStart()\"\n                  (close)=\"close()\">\n        Content.\n      </md-sidenav>\n      <button (click)=\"sidenav.open()\" class=\"open\"></button>\n      <button (click)=\"sidenav.close()\" class=\"close\"></button>\n    </md-sidenav-layout>\n  `,\n})\nclass BasicTestApp {\n  openStartCount: number = 0;\n  openCount: number = 0;\n  closeStartCount: number = 0;\n  closeCount: number = 0;\n\n  openStart() {\n    this.openStartCount++;\n  }\n  open() {\n    this.openCount++;\n  }\n  closeStart() {\n    this.closeStartCount++;\n  }\n  close() {\n    this.closeCount++;\n  }\n}\n"]}