{"version":3,"file":"radio.js","sourceRoot":"","sources":["radio.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  Provider,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor\n} from '@angular/common';\nimport {MdRadioDispatcher} from './radio_dispatcher';\n\n\nexport {MdRadioDispatcher} from './radio_dispatcher';\n\n\n\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n */\nconst MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = new Provider(\n    NG_VALUE_ACCESSOR, {\n      useExisting: forwardRef(() => MdRadioGroup),\n      multi: true\n    });\n\n// TODO(mtlin):\n// Ink ripple is currently placeholder.\n// Determine motion spec for button transitions.\n// Design review.\n// RTL\n// Support forms API.\n// Use ChangeDetectionStrategy.OnPush\n\nvar _uniqueIdCounter = 0;\n\n/** A simple change event emitted by either MdRadioButton or MdRadioGroup. */\nexport class MdRadioChange {\n  source: MdRadioButton;\n  value: any;\n}\n\n@Directive({\n  selector: 'md-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n  },\n})\nexport class MdRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** The value for the radio group. Should match currently selected button. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = null;\n\n  /** Disables all individual radio buttons assigned to this group. */\n  private _disabled: boolean = false;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MdRadioButton = null;\n\n  /** Change event subscription set up by registerOnChange (ControlValueAccessor). */\n  private _changeSubscription: {unsubscribe: () => any} = null;\n\n  onTouched: () => any = () => {};\n\n  /** Event emitted when the group value changes. */\n  @Output()\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MdRadioButton))\n  private _radios: QueryList<MdRadioButton> = null;\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    if (this._name == null) {\n      this.name = `md-radio-group-${_uniqueIdCounter++}`;\n    } else {\n      this._updateChildRadioNames();\n    }\n  }\n\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n\n    this._updateChildRadioNames();\n  }\n\n  /** Propagate name attribute to radio buttons. */\n  private _updateChildRadioNames(): void {\n    if (this._radios != null) {\n      this._radios.forEach((radio) => {\n        radio.name = this._name;\n      });\n    }\n  }\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _updateSelectedRadioFromValue(): void {\n    // Update selected if different from current value.\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n    if (this._radios != null && !isAlreadySelected) {\n      let matched = this._radios.filter((radio) => {\n        return radio.value == this._value;\n      });\n\n      if (matched.length == 0) {\n        // Didn't find a button that matches this value, return early without setting.\n        return;\n      }\n\n      // Change the selection immediately.\n      this.selected = matched[0];\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  private _emitChangeEvent(): void {\n    let event = new MdRadioChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MdRadioButton) {\n    this._selected = selected;\n    this.value = selected.value;\n\n    selected.checked = true;\n  }\n\n   /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any) {\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._changeSubscription = <{unsubscribe: () => any}>this.change.subscribe(\n      (changeEvent: MdRadioChange) => { fn(changeEvent.value); });\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n\n\n@Component({\n  selector: 'md-radio-button',\n  templateUrl: './components/radio/radio.html',\n  styleUrls: ['./components/radio/radio.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdRadioButton implements OnInit {\n  @HostBinding('class.md-radio-focused')\n  private _isFocused: boolean;\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** The unique ID for the radio button. */\n  @HostBinding('id')\n  @Input()\n  id: string;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input()\n  name: string;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MdRadioGroup;\n\n  /** Event emitted when the group value changes. */\n  @Output()\n  change: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n\n  constructor(@Optional() radioGroup: MdRadioGroup, public radioDispatcher: MdRadioDispatcher) {\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n    this.radioGroup = radioGroup;\n\n    radioDispatcher.listen((name: string) => {\n      if (name == this.name) {\n        this.checked = false;\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `md-radio-${_uniqueIdCounter++}`;\n    }\n\n    if (this.radioGroup && this._value == this.radioGroup.value) {\n      this._checked = true;\n    }\n  }\n\n  /*\n   * We use a hidden native input field to handle changes to focus state via keyboard navigation,\n   * with visual rendering done separately. The native element is kept in sync with the overall\n   * state of the component.\n   */\n  onInputFocus() {\n    this._isFocused = true;\n  }\n\n  onInputBlur() {\n    this._isFocused = false;\n  }\n\n  /** Input change handler, called only on keyboard selection. */\n  onInputChange() {\n    this.checked = true;\n  }\n\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  @HostBinding('class.md-radio-checked')\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  set checked(value: boolean) {\n    if (value) {\n      // Notify all radio buttons with the same name to un-check.\n      this.radioDispatcher.notify(this.name);\n\n      if (!this._checked) {\n        this._emitChangeEvent();\n      }\n    }\n    this._checked = value;\n  }\n\n  /** MdRadioGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.radioGroup != null && this.checked) {\n        this.radioGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  @HostBinding('class.md-radio-disabled')\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n\n  set disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this.radioGroup != null) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button as checked.\n      this.radioGroup.selected = this;\n    } else {\n      this.checked = true;\n    }\n  }\n}\n"]}