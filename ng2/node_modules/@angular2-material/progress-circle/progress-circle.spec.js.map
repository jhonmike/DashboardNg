{"version":3,"file":"progress-circle.spec.js","sourceRoot":"","sources":["progress-circle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component, DebugElement} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdProgressCircle} from './progress-circle';\n\n\nexport function main() {\n  describe('MdProgressCircular', () => {\n    let builder: TestComponentBuilder;\n\n    beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n      builder = tcb;\n    }));\n\n    it('should apply a mode of \"determinate\" if no mode is provided.', (done: () => void) => {\n      builder\n        .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\n        .createAsync(TestApp)\n        .then((fixture) => {\n          fixture.detectChanges();\n          let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n          expect(progressElement.componentInstance.mode).toBe('determinate');\n          done();\n        });\n    });\n\n    it('should not modify the mode if a valid mode is provided.', (done: () => void) => {\n      builder\n        .overrideTemplate(TestApp, '<md-progress-circle mode=\"indeterminate\"></md-progress-circle>')\n        .createAsync(TestApp)\n        .then((fixture) => {\n          fixture.detectChanges();\n          let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n          expect(progressElement.componentInstance.mode).toBe('indeterminate');\n          done();\n        });\n    });\n\n    it('should define a default value for the value attribute', (done: () => void) => {\n      builder\n        .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\n        .createAsync(TestApp)\n        .then((fixture) => {\n          fixture.detectChanges();\n          let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n          expect(progressElement.componentInstance.value).toBe(0);\n          done();\n        });\n    });\n\n    it('should clamp the value of the progress between 0 and 100', (done: () => void) => {\n      builder\n        .overrideTemplate(TestApp, '<md-progress-circle></md-progress-circle>')\n        .createAsync(TestApp)\n        .then((fixture) => {\n          fixture.detectChanges();\n          let progressElement = getChildDebugElement(fixture.debugElement, 'md-progress-circle');\n          let progressComponent = progressElement.componentInstance;\n\n          progressComponent.value = 50;\n          expect(progressComponent.value).toBe(50);\n\n          progressComponent.value = 999;\n          expect(progressComponent.value).toBe(100);\n\n          progressComponent.value = -10;\n          expect(progressComponent.value).toBe(0);\n          done();\n        });\n    });\n  });\n}\n\n\n/** Gets a child DebugElement by tag name. */\nfunction getChildDebugElement(parent: DebugElement, selector: string): DebugElement {\n  return parent.query(By.css(selector));\n}\n\n\n\n/** Test component that contains an MdButton. */\n@Component({\n    directives: [MdProgressCircle],\n    template: '',\n})\nclass TestApp {}\n"]}