{"version":3,"file":"overlay.js","sourceRoot":"","sources":["overlay.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAMO,eAAe,CAAC,CAAA;AACvB,8BAA2B,iBAAiB,CAAC,CAAA;AAC7C,gCAA4B,2BAA2B,CAAC,CAAA;AACxD,4BAAyB,eAAe,CAAC,CAAA;AACzC,yCAAqC,qCAAqC,CAAC,CAAA;AAC3E,2CAAuC,uCAAuC,CAAC,CAAA;AAG/E,gFAAgF;AAChF,8BAA2B,iBAAiB,CAAC;AAArC,oDAAqC;AAC7C,4BAAyB,eAAe,CAAC;AAAjC,8CAAiC;AACzC,kCAAqC,qBAAqB,CAAC;AAAnD,4EAAmD;AAE3D,iFAAiF;AACpE,+BAAuB,GAAG,IAAI,kBAAW,CAAC,kBAAkB,CAAC,CAAC;AAE3E,8BAA8B;AAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,oDAAoD;AACpD,IAAI,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;AAGtC;;;;;;;GAOG;AAEH;IACE,iBAC6C,wBAAqC,EACtE,uBAA+C;QADd,6BAAwB,GAAxB,wBAAwB,CAAa;QACtE,4BAAuB,GAAvB,uBAAuB,CAAwB;IAC3D,CAAC;IAED;;;;OAIG;IACH,wBAAM,GAAN,UAAO,KAAkC;QAAzC,iBAEC;QAFM,qBAAkC,GAAlC,oBAAkC;QACvC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC;IACnF,CAAC;IAED;;;OAGG;IACH,0BAAQ,GAAR;QACE,MAAM,CAAC,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACK,oCAAkB,GAA1B,UAA2B,KAAmB;QAC5C,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,GAAI,gBAAc,YAAY,EAAI,CAAC;QAC1C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAEtC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7B,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,4BAAU,GAAV,UAAW,IAAiB,EAAE,KAAmB;QAC/C,EAAE,CAAC,CAAC,KAAK,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC;YACnC,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,+BAAa,CACpB,IAAI,EACJ,IAAI,CAAC,uBAAuB,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,wBAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IACtD,CAAC;IArEF;QAAC,iBAAU,EAAE;mBAGP,aAAM,CAAC,+BAAuB,CAAC;;eAHxB;IAsEd,cAAC;AAAD,CAAC,AArED,IAqEC;AArEY,eAAO,UAqEnB,CAAA;AAGD,6CAA6C;AAC7C;IAAA;IAUA,CAAC;IATC,0CAA0C;IAC1C,uCAAM,GAAN;QACE,MAAM,CAAC,IAAI,iDAAsB,EAAE,CAAC;IACtC,CAAC;IAED,4CAA4C;IAC5C,2CAAU,GAAV,UAAW,UAAsB;QAC/B,MAAM,CAAC,IAAI,qDAAwB,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC;IACH,6BAAC;AAAD,CAAC,AAVD,IAUC;AAVY,8BAAsB,yBAUlC,CAAA;AAED,0CAA0C;AAC1C,IAAI,gBAAgB,GAA2B,IAAI,sBAAsB,EAAE,CAAC","sourcesContent":["import {\n  DynamicComponentLoader,\n  OpaqueToken,\n  Inject,\n  Injectable,\n  ElementRef\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {GlobalPositionStrategy} from './position/global-position-strategy';\nimport {RelativePositionStrategy} from './position/relative-position-strategy';\n\n\n// Re-export overlay-related modules so they can be imported directly from here.\nexport {OverlayState} from './overlay-state';\nexport {OverlayRef} from './overlay-ref';\nexport {createOverlayContainer} from './overlay-container';\n\n/** Token used to inject the DOM element that serves as the overlay container. */\nexport const OVERLAY_CONTAINER_TOKEN = new OpaqueToken('overlayContainer');\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n/** The default state for newly created overlays. */\nlet defaultState = new OverlayState();\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\nexport class Overlay {\n  constructor(\n      @Inject(OVERLAY_CONTAINER_TOKEN) private _overlayContainerElement: HTMLElement,\n      private _dynamicComponentLoader: DynamicComponentLoader) {\n  }\n\n  /**\n   * Creates an overlay.\n   * @param state State to apply to the overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(state: OverlayState = defaultState): Promise<OverlayRef> {\n    return this._createPaneElement(state).then(pane => this._createOverlayRef(pane));\n  }\n\n  /**\n   * Returns a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   */\n  position() {\n    return POSITION_BUILDER;\n  }\n\n  /**\n   * Creates the DOM element for an overlay.\n   * @param state State to apply to the created element.\n   * @returns Promise resolving to the created element.\n   */\n  private _createPaneElement(state: OverlayState): Promise<HTMLElement> {\n    var pane = document.createElement('div');\n    pane.id  = `md-overlay-${nextUniqueId++}`;\n    pane.classList.add('md-overlay-pane');\n\n    this.applyState(pane, state);\n    this._overlayContainerElement.appendChild(pane);\n\n    return Promise.resolve(pane);\n  }\n\n  /**\n   * Applies a given state to the given pane element.\n   * @param pane The pane to modify.\n   * @param state The state to apply.\n   */\n  applyState(pane: HTMLElement, state: OverlayState) {\n    if (state.positionStrategy != null) {\n      state.positionStrategy.apply(pane);\n    }\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(\n        pane,\n        this._dynamicComponentLoader);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   * @returns {OverlayRef}\n   */\n  private _createOverlayRef(pane: HTMLElement): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\n\n\n/** Builder for overlay position strategy. */\nexport class OverlayPositionBuilder {\n  /** Creates a global position strategy. */\n  global() {\n    return new GlobalPositionStrategy();\n  }\n\n  /** Creates a relative position strategy. */\n  relativeTo(elementRef: ElementRef) {\n    return new RelativePositionStrategy(elementRef);\n  }\n}\n\n// We only ever need one position builder.\nlet POSITION_BUILDER: OverlayPositionBuilder = new OverlayPositionBuilder();\n"]}