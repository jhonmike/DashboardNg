{"version":3,"file":"overlay.spec.js","sourceRoot":"","sources":["overlay.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wBASO,uBAAuB,CAAC,CAAA;AAC/B,wBAAmC,2BAA2B,CAAC,CAAA;AAC/D,qBAIO,eAAe,CAAC,CAAA;AACvB,kCAAsC,6BAA6B,CAAC,CAAA;AACpE,uBAA8C,kBAAkB,CAAC,CAAA;AACjE,wBAA+C,WAAW,CAAC,CAAA;AAE3D,8BAA2B,iBAAiB,CAAC,CAAA;AAI7C;IACE,kBAAQ,CAAC,SAAS,EAAE;QAClB,IAAI,OAA6B,CAAC;QAClC,IAAI,OAAgB,CAAC;QACrB,IAAI,eAAgC,CAAC;QACrC,IAAI,cAA8B,CAAC;QACnC,IAAI,uBAAoC,CAAC;QAEzC,6BAAmB,CAAC,cAAM,OAAA;YACxB,iBAAO;YACP,cAAO,CAAC,iCAAuB,EAAE,EAAC,UAAU,EAAE;oBAC5C,uBAAuB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACxD,MAAM,CAAC,uBAAuB,CAAC;gBACjC,CAAC,EAAC,CAAC;SACJ,EANyB,CAMzB,CAAC,CAAC;QAEH,IAAI,IAAI,GAAG,CAAC,8BAAoB,EAAE,iBAAO,CAAC,CAAC;QAC3C,oBAAU,CAAC,gBAAM,CAAC,IAAI,EAAE,mBAAS,CAAC,UAAC,GAAyB,EAAE,CAAU;YACtE,OAAO,GAAG,GAAG,CAAC;YACd,OAAO,GAAG,CAAC,CAAC;YAEZ,OAAO,CAAC,WAAW,CAAC,gCAAgC,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;gBAChE,OAAO,CAAC,aAAa,EAAE,CAAC;gBACxB,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBAC1D,eAAe,GAAG,IAAI,wBAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;YAC9F,CAAC,CAAC,CAAC;YAEH,yBAAe,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC,CAAC,CAAC;QAEL,YAAE,CAAC,yCAAyC,EAAE,aAAa,CAAC;YAC1D,IAAI,UAAsB,CAAC;YAE3B,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAA,GAAG;gBACvB,UAAU,GAAG,GAAG,CAAC;gBACjB,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;YAEH,yBAAe,EAAE,CAAC;YAElB,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAE/D,UAAU,CAAC,OAAO,EAAE,CAAC;YACrB,gBAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1D,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,CAAC;QAEJ,YAAE,CAAC,+CAA+C,EAAE,aAAa,CAAC;YAChE,IAAI,UAAsB,CAAC;YAE3B,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAA,GAAG;gBACvB,UAAU,GAAG,GAAG,CAAC;gBACjB,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,yBAAe,EAAE,CAAC;YAElB,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAE9D,UAAU,CAAC,OAAO,EAAE,CAAC;YACrB,gBAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1D,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,CAAC;QAEJ,YAAE,CAAC,+BAA+B,EAAE,aAAa,CAAC;YAChD,IAAI,eAA2B,CAAC;YAChC,IAAI,cAA0B,CAAC;YAE/B,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAA,GAAG;gBACvB,eAAe,GAAG,GAAG,CAAC;gBACtB,eAAe,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,yBAAe,EAAE,CAAC;YAElB,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAA,GAAG;gBACvB,cAAc,GAAG,GAAG,CAAC;gBACrB,cAAc,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,yBAAe,EAAE,CAAC;YAElB,gBAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1D,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC/D,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAE9D,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1B,gBAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1D,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAE9D,cAAc,CAAC,OAAO,EAAE,CAAC;YACzB,gBAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1D,gBAAM,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,CAAC;QAEJ,kBAAQ,CAAC,YAAY,EAAE;YACrB,IAAI,KAAmB,CAAC;YAExB,oBAAU,CAAC;gBACT,KAAK,GAAG,IAAI,4BAAY,EAAE,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,YAAE,CAAC,uCAAuC,EAAE,aAAa,CAAC;gBACxD,KAAK,CAAC,gBAAgB,GAAG,IAAI,oBAAoB,EAAE,CAAC;gBAEpD,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;oBAC5B,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;gBAEH,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,uBAAuB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAnHe,YAAI,OAmHnB,CAAA;AAGD,oDAAoD;AAKpD;IAAA;IAAgB,CAAC;IAJjB;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,QAAQ,EAAE,cAAc;SACzB,CAAC;;gBAAA;IACc,eAAC;AAAD,CAAC,AAAjB,IAAiB;AAGjB,0EAA0E;AAM1E;IAEE,0CAAmB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IAD1D;QAAC,gBAAS,CAAC,2CAAuB,CAAC;;4EAAA;IANrC;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,kCAAkC;YAC5C,UAAU,EAAE,CAAC,2CAAuB,CAAC;SACtC,CAAC;;wCAAA;IAIF,uCAAC;AAAD,CAAC,AAHD,IAGC;AAED;IAAA;IAMA,CAAC;IALC,oCAAK,GAAL,UAAM,OAAgB;QACpB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEH,2BAAC;AAAD,CAAC,AAND,IAMC;AAED,uBAAuB,EAAc;IACnC,MAAM,CAAC,gBAAM,CAAC,EAAE,EAAE,mBAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n  fakeAsync,\n  flushMicrotasks,\n  beforeEachProviders,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {\n    Component,\n    ViewChild,\n    provide, ViewContainerRef,\n} from '@angular/core';\nimport {TemplatePortalDirective} from '../portal/portal-directives';\nimport {TemplatePortal, ComponentPortal} from '../portal/portal';\nimport {Overlay, OVERLAY_CONTAINER_TOKEN} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayState} from './overlay-state';\nimport {PositionStrategy} from './position/position-strategy';\n\n\nexport function main() {\n  describe('Overlay', () => {\n    let builder: TestComponentBuilder;\n    let overlay: Overlay;\n    let componentPortal: ComponentPortal;\n    let templatePortal: TemplatePortal;\n    let overlayContainerElement: HTMLElement;\n\n    beforeEachProviders(() => [\n      Overlay,\n      provide(OVERLAY_CONTAINER_TOKEN, {useFactory: () => {\n        overlayContainerElement = document.createElement('div');\n        return overlayContainerElement;\n      }})\n    ]);\n\n    let deps = [TestComponentBuilder, Overlay];\n    beforeEach(inject(deps, fakeAsync((tcb: TestComponentBuilder, o: Overlay) => {\n      builder = tcb;\n      overlay = o;\n\n      builder.createAsync(TestComponentWithTemplatePortals).then(fixture => {\n        fixture.detectChanges();\n        templatePortal = fixture.componentInstance.templatePortal;\n        componentPortal = new ComponentPortal(PizzaMsg, fixture.componentInstance.viewContainerRef);\n      });\n\n      flushMicrotasks();\n    })));\n\n    it('should load a component into an overlay', fakeAsyncTest(() => {\n      let overlayRef: OverlayRef;\n\n      overlay.create().then(ref => {\n        overlayRef = ref;\n        overlayRef.attach(componentPortal);\n      });\n\n      flushMicrotasks();\n\n      expect(overlayContainerElement.textContent).toContain('Pizza');\n\n      overlayRef.dispose();\n      expect(overlayContainerElement.childNodes.length).toBe(0);\n      expect(overlayContainerElement.textContent).toBe('');\n    }));\n\n    it('should load a template portal into an overlay', fakeAsyncTest(() => {\n      let overlayRef: OverlayRef;\n\n      overlay.create().then(ref => {\n        overlayRef = ref;\n        overlayRef.attach(templatePortal);\n      });\n\n      flushMicrotasks();\n\n      expect(overlayContainerElement.textContent).toContain('Cake');\n\n      overlayRef.dispose();\n      expect(overlayContainerElement.childNodes.length).toBe(0);\n      expect(overlayContainerElement.textContent).toBe('');\n    }));\n\n    it('should open multiple overlays', fakeAsyncTest(() => {\n      let pizzaOverlayRef: OverlayRef;\n      let cakeOverlayRef: OverlayRef;\n\n      overlay.create().then(ref => {\n        pizzaOverlayRef = ref;\n        pizzaOverlayRef.attach(componentPortal);\n      });\n\n      flushMicrotasks();\n\n      overlay.create().then(ref => {\n        cakeOverlayRef = ref;\n        cakeOverlayRef.attach(templatePortal);\n      });\n\n      flushMicrotasks();\n\n      expect(overlayContainerElement.childNodes.length).toBe(2);\n      expect(overlayContainerElement.textContent).toContain('Pizza');\n      expect(overlayContainerElement.textContent).toContain('Cake');\n\n      pizzaOverlayRef.dispose();\n      expect(overlayContainerElement.childNodes.length).toBe(1);\n      expect(overlayContainerElement.textContent).toContain('Cake');\n\n      cakeOverlayRef.dispose();\n      expect(overlayContainerElement.childNodes.length).toBe(0);\n      expect(overlayContainerElement.textContent).toBe('');\n    }));\n\n    describe('applyState', () => {\n      let state: OverlayState;\n\n      beforeEach(() => {\n        state = new OverlayState();\n      });\n\n      it('should apply the positioning strategy', fakeAsyncTest(() => {\n        state.positionStrategy = new FakePositionStrategy();\n\n        overlay.create(state).then(ref => {\n          ref.attach(componentPortal);\n        });\n\n        flushMicrotasks();\n\n        expect(overlayContainerElement.querySelectorAll('.fake-positioned').length).toBe(1);\n      }));\n    });\n  });\n}\n\n\n/** Simple component for testing ComponentPortal. */\n@Component({\n  selector: 'pizza-msg',\n  template: '<p>Pizza</p>',\n})\nclass PizzaMsg {}\n\n\n/** Test-bed component that contains a TempatePortal and an ElementRef. */\n@Component({\n  selector: 'portal-test',\n  template: `<template portal>Cake</template>`,\n  directives: [TemplatePortalDirective],\n})\nclass TestComponentWithTemplatePortals {\n  @ViewChild(TemplatePortalDirective) templatePortal: TemplatePortalDirective;\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\nclass FakePositionStrategy implements PositionStrategy {\n  apply(element: Element): Promise<void> {\n    element.classList.add('fake-positioned');\n    return Promise.resolve();\n  }\n\n}\n\nfunction fakeAsyncTest(fn: () => void) {\n  return inject([], fakeAsync(fn));\n}\n"]}