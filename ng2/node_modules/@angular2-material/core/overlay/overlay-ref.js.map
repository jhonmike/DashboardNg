{"version":3,"file":"overlay-ref.js","sourceRoot":"","sources":["overlay-ref.ts"],"names":[],"mappings":";AAEA;;;GAGG;AACH;IACE,oBAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;IAAI,CAAC;IAEhD,2BAAM,GAAN,UAAO,MAAmB;QACxB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,2BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IACnC,CAAC;IAED,4BAAO,GAAP;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,gCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IACxC,CAAC;IAGH,iBAAC;AAAD,CAAC,AApBD,IAoBC;AApBY,kBAAU,aAoBtB,CAAA","sourcesContent":["import {PortalHost, Portal} from '../portal/portal';\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\n  constructor(private _portalHost: PortalHost) { }\n\n  attach(portal: Portal<any>): Promise<any> {\n    return this._portalHost.attach(portal);\n  }\n\n  detach(): Promise<any> {\n    return this._portalHost.detach();\n  }\n\n  dispose(): void {\n    this._portalHost.dispose();\n  }\n\n  hasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n\n  // TODO(jelbourn): add additional methods for manipulating the overlay.\n}\n"]}