{"version":3,"file":"button.js","sourceRoot":"","sources":["button.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  HostBinding,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Renderer,\n} from '@angular/core';\n\n// TODO(jelbourn): Ink ripples.\n// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n\n@Component({\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' +\n            'button[md-fab], button[md-mini-fab]',\n  inputs: ['color'],\n  host: {\n    '[class.md-button-focus]': 'isKeyboardFocused',\n    '(mousedown)': 'setMousedown()',\n    '(focus)': 'setKeyboardFocus()',\n    '(blur)': 'removeKeyboardFocus()',\n  },\n  templateUrl: './components/button/button.html',\n  styleUrls: ['./components/button/button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdButton {\n  private _color: string;\n\n  /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */\n  isKeyboardFocused: boolean = false;\n\n  /** Whether a mousedown has occurred on this element in the last 100ms. */\n  isMouseDown: boolean = false;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer) { }\n\n  get color(): string {\n    return this._color;\n  }\n\n  set color(value: string) {\n    this._updateColor(value);\n  }\n\n  setMousedown() {\n    // We only *show* the focus style when focus has come to the button via the keyboard.\n    // The Material Design spec is silent on this topic, and without doing this, the\n    // button continues to look :active after clicking.\n    // @see http://marcysutton.com/button-focus-hell/\n    this.isMouseDown = true;\n    setTimeout(() => { this.isMouseDown = false; }, 100);\n  }\n\n  _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n\n  _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this.renderer.setElementClass(this.elementRef.nativeElement, `md-${color}`, isAdd);\n    }\n  }\n\n  setKeyboardFocus($event: any) {\n    this.isKeyboardFocused = !this.isMouseDown;\n  }\n\n  removeKeyboardFocus() {\n    this.isKeyboardFocused = false;\n  }\n}\n\n@Component({\n  selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',\n  inputs: ['color'],\n  host: {\n    '[class.md-button-focus]': 'isKeyboardFocused',\n    '(mousedown)': 'setMousedown()',\n    '(focus)': 'setKeyboardFocus()',\n    '(blur)': 'removeKeyboardFocus()',\n    '(click)': 'haltDisabledEvents($event)',\n  },\n  templateUrl: './components/button/button.html',\n  styleUrls: ['./components/button/button.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdAnchor extends MdButton {\n  _disabled: boolean = null;\n\n  constructor(elementRef: ElementRef, renderer: Renderer) {\n    super(elementRef, renderer);\n  }\n\n  @HostBinding('tabIndex')\n  get tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n\n  @HostBinding('attr.aria-disabled')\n  /** Gets the aria-disabled value for the component, which must be a string for Dart. */\n  get isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n\n  @HostBinding('attr.disabled')\n  @Input('disabled')\n  get disabled() { return this._disabled; }\n\n  set disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value != false) ? true : null;\n  }\n\n  haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n"]}