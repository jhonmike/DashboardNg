{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  Provider,\n  Renderer,\n  ViewEncapsulation,\n  forwardRef,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n} from '@angular/common';\n\n\n\n/**\n * Monotonically increasing integer used to auto-generate unique ids for checkbox components.\n */\nlet nextId = 0;\n\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor. This allows it\n * to support [(ngModel)] and ngControl.\n */\nconst MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = new Provider(\n    NG_VALUE_ACCESSOR, {\n      useExisting: forwardRef(() => MdCheckbox),\n      multi: true\n    });\n\n/**\n * Represents the different states that require custom transitions between them.\n */\nenum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. An MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  selector: 'md-checkbox',\n  templateUrl: './components/checkbox/checkbox.html',\n  styleUrls: ['./components/checkbox/checkbox.css'],\n  host: {\n    'role': 'checkbox',\n    '[id]': 'id',\n    '[class.md-checkbox-indeterminate]': 'indeterminate',\n    '[class.md-checkbox-checked]': 'checked',\n    '[class.md-checkbox-disabled]': 'disabled',\n    '[class.md-checkbox-align-end]': 'align == \"end\"',\n    '[attr.tabindex]': 'disabled ? null : tabindex',\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.aria-labelledby]': 'labelId',\n    '[attr.aria-checked]': 'getAriaChecked()',\n    '[attr.aria-disabled]': 'disabled',\n    '(click)': 'onInteractionEvent($event)',\n    '(keydown.space)': 'onSpaceDown($event)',\n    '(keyup.space)': 'onInteractionEvent($event)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MdCheckbox implements ControlValueAccessor {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */\n  @Input() id: string = `md-checkbox-${++nextId}`;\n\n  /** Whether or not the checkbox should come before or after the label. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /**\n   * Whether the checkbox is disabled. When the checkbox is disabled it cannot be interacted with.\n   * The correct ARIA attributes are applied to denote this to assistive technology.\n   */\n  @Input() disabled: boolean = false;\n\n  /**\n   * The tabindex attribute for the checkbox. Note that when the checkbox is disabled, the attribute\n   * on the host element will be removed. It will be placed back when the checkbox is re-enabled.\n   */\n  @Input() tabindex: number = 0;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  onTouched: () => any = () => {};\n\n  /** Whether the `checked` state has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _changeSubscription: {unsubscribe: () => any} = null;\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  /**\n   * Whether the checkbox is checked. Note that setting `checked` will immediately set\n   * `indeterminate` to false.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._indeterminate = false;\n      this._checked = checked;\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Only fire a change event if this isn't the first time the checked property is ever set.\n      if (this._isInitialized) {\n        this.change.emit(this._checked);\n      }\n    }\n\n    this._isInitialized = true;\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to\n   * false. This differs from the web platform in that indeterminate state on native\n   * checkboxes is only remove when the user manually checks the checkbox (rather than setting the\n   * `checked` property programmatically). However, we feel that this behavior is more accommodating\n   * to the way consumers would envision using this component.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    this._indeterminate = indeterminate;\n    if (this._indeterminate) {\n      this._transitionCheckState(TransitionCheckState.Indeterminate);\n    } else {\n      this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n    }\n  }\n\n  /** The id that is attached to the checkbox's label. */\n  get labelId() {\n    return `${this.id}-label`;\n  }\n\n  /** Returns the proper aria-checked attribute value based on the checkbox's state. */\n  getAriaChecked() {\n    if (this.indeterminate) {\n      return 'mixed';\n    }\n    return this.checked ? 'true' : 'false';\n  }\n\n  /** Toggles the checked state of the checkbox. If the checkbox is disabled, this does nothing. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler used for both (click) and (keyup.space) events. Delegates to toggle().\n   */\n  onInteractionEvent(event: Event) {\n    if (this.disabled) {\n      event.stopPropagation();\n      return;\n    }\n    this.toggle();\n  }\n\n  /**\n   * Event handler used for (keydown.space) events. Used to prevent spacebar events from bubbling\n   * when the component is focused, which prevents side effects like page scrolling from happening.\n   */\n  onSpaceDown(evt: Event) {\n    evt.preventDefault();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any) {\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._changeSubscription = <{unsubscribe: () => any}>this.change.subscribe(fn);\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let renderer = this._renderer;\n    let elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);\n    }\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    var animSuffix: string;\n\n    switch (oldState) {\n    case TransitionCheckState.Init:\n      // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n      // [checked] bound to it.\n      if (newState === TransitionCheckState.Checked) {\n        animSuffix = 'unchecked-checked';\n      } else {\n        return '';\n      }\n      break;\n    case TransitionCheckState.Unchecked:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'unchecked-checked' : 'unchecked-indeterminate';\n      break;\n    case TransitionCheckState.Checked:\n      animSuffix = newState === TransitionCheckState.Unchecked ?\n          'checked-unchecked' : 'checked-indeterminate';\n      break;\n    case TransitionCheckState.Indeterminate:\n      animSuffix = newState === TransitionCheckState.Checked ?\n          'indeterminate-checked' : 'indeterminate-unchecked';\n    }\n\n    return `md-checkbox-anim-${animSuffix}`;\n  }\n}\n"]}