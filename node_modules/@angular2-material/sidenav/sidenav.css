/**
 * Mixin that creates a new stacking context.
 * see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
 */
/**
 * This mixin hides an element visually.
 * That means it's still accessible for screen-readers but not visible in view.
 */
/**
 * A collection of mixins and CSS classes that can be used to apply elevation to a material
 * element.
 * See: https://www.google.com/design/spec/what-is-material/elevation-shadows.html
 * Examples:
 *
 *
 * .md-foo {
 *   @include $md-elevation(2);
 *
 *   &:active {
 *     @include $md-elevation(8);
 *   }
 * }
 *
 * <div id="external-card" class="md-elevation-z2"><p>Some content</p></div>
 *
 * For an explanation of the design behind how elevation is implemented, see the design doc at
 * https://goo.gl/Kq0k9Z.
 */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a will-change rule.
 */
/** The default duration value for elevation transitions. */
/** The default easing value for elevation transitions. */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $zValue.
 * The $zValue must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a transition property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * .foo {
 *   transition: md-elevation-transition-property-value(), opacity 100ms ease;
 *   will-change: $md-elevation-property, opacity;
 * }
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/**
 * Mixin to help with defining LTR/RTL 'transform: translateX()' values.
 * @param $open The translation value when the sidenav is opened.
 * @param $close The translation value when the sidenav is closed.
 */
/* This mixin ensures a sidenav element spans the whole viewport.*/
:host {
  position: relative;
  -webkit-transform: translate3D(0, 0, 0);
          transform: translate3D(0, 0, 0);
  box-sizing: border-box;
  display: block;
  overflow-x: hidden; }
  :host[fullscreen] {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0; }
    :host[fullscreen].md-sidenav-opened {
      overflow: hidden; }
  :host > .md-sidenav-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: block;
    z-index: 2;
    visibility: hidden; }
    :host > .md-sidenav-backdrop.md-sidenav-shown {
      visibility: visible;
      background-color: rgba(0, 0, 0, 0.6); }
  :host > md-content {
    position: relative;
    -webkit-transform: translate3D(0, 0, 0);
            transform: translate3D(0, 0, 0);
    display: block; }
  :host > md-sidenav {
    position: relative;
    -webkit-transform: translate3D(0, 0, 0);
            transform: translate3D(0, 0, 0);
    display: block;
    position: fixed;
    top: 0;
    bottom: 0;
    z-index: 3;
    min-width: 5%;
    overflow-y: auto;
    background-color: white;
    -webkit-transform: translateX(-100%);
            transform: translateX(-100%); }
    :host > md-sidenav.md-sidenav-closed {
      visibility: hidden; }
    :host > md-sidenav.md-sidenav-closing {
      -webkit-transform: translateX(-100%);
              transform: translateX(-100%);
      will-change: transform; }
    :host > md-sidenav.md-sidenav-opening {
      box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
      visibility: visible;
      -webkit-transform: translateX(0);
              transform: translateX(0);
      will-change: transform; }
    :host > md-sidenav.md-sidenav-opened {
      box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
      -webkit-transform: translateX(0);
              transform: translateX(0); }
    :host > md-sidenav.md-sidenav-push {
      background-color: white; }
    :host > md-sidenav.md-sidenav-side {
      z-index: 1; }
    :host > md-sidenav.md-sidenav-end {
      right: 0;
      -webkit-transform: translateX(100%);
              transform: translateX(100%); }
      :host > md-sidenav.md-sidenav-end.md-sidenav-closed {
        visibility: hidden; }
      :host > md-sidenav.md-sidenav-end.md-sidenav-closing {
        -webkit-transform: translateX(100%);
                transform: translateX(100%);
        will-change: transform; }
      :host > md-sidenav.md-sidenav-end.md-sidenav-opening {
        box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
        visibility: visible;
        -webkit-transform: translateX(0);
                transform: translateX(0);
        will-change: transform; }
      :host > md-sidenav.md-sidenav-end.md-sidenav-opened {
        box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
        -webkit-transform: translateX(0);
                transform: translateX(0); }

:host-context([dir="rtl"]) > md-sidenav {
  -webkit-transform: translateX(100%);
          transform: translateX(100%); }
  :host-context([dir="rtl"]) > md-sidenav.md-sidenav-closed {
    visibility: hidden; }
  :host-context([dir="rtl"]) > md-sidenav.md-sidenav-closing {
    -webkit-transform: translateX(100%);
            transform: translateX(100%);
    will-change: transform; }
  :host-context([dir="rtl"]) > md-sidenav.md-sidenav-opening {
    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
    visibility: visible;
    -webkit-transform: translateX(0);
            transform: translateX(0);
    will-change: transform; }
  :host-context([dir="rtl"]) > md-sidenav.md-sidenav-opened {
    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
    -webkit-transform: translateX(0);
            transform: translateX(0); }
  :host-context([dir="rtl"]) > md-sidenav.md-sidenav-end {
    left: 0;
    right: auto;
    -webkit-transform: translateX(-100%);
            transform: translateX(-100%); }
    :host-context([dir="rtl"]) > md-sidenav.md-sidenav-end.md-sidenav-closed {
      visibility: hidden; }
    :host-context([dir="rtl"]) > md-sidenav.md-sidenav-end.md-sidenav-closing {
      -webkit-transform: translateX(-100%);
              transform: translateX(-100%);
      will-change: transform; }
    :host-context([dir="rtl"]) > md-sidenav.md-sidenav-end.md-sidenav-opening {
      box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
      visibility: visible;
      -webkit-transform: translateX(0);
              transform: translateX(0);
      will-change: transform; }
    :host-context([dir="rtl"]) > md-sidenav.md-sidenav-end.md-sidenav-opened {
      box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);
      -webkit-transform: translateX(0);
              transform: translateX(0); }
