{"version":3,"file":"progress-circle.js","sourceRoot":"","sources":["progress-circle.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AAGvB,yCAAyC;AAGzC;;GAEG;AAYH;IAAA;QACE;;;;;WAKG;QAGH,WAAM,GAAW,CAAC,CAAC;QAEnB;;;;;WAKG;QAEM,SAAI,GAAoC,aAAa,CAAC;IAsCjE,CAAC;IAnCC;;;;;;OAMG;IACH,2CAAgB,GAAhB;QACE,uFAAuF;QACvF,uBAAuB;QAEvB,wEAAwE;QACxE,cAAc;QACd,MAAM,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;IAC9C,CAAC;IAID,sBAAI,mCAAK;QADT,4DAA4D;aAC5D;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;QAGD,2EAA2E;aAC3E,UAAU,CAAS;YACjB,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBACd,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;;;OARA;IAWD,8CAA8C;IACvC,sBAAK,GAAZ,UAAa,CAAS;QACpB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAhDD;QAAC,kBAAW,CAAC,oBAAoB,CAAC;QACjC,YAAK,CAAC,OAAO,CAAC;;oDAAA;IASf;QAAC,kBAAW,CAAC,WAAW,CAAC;QACxB,YAAK,EAAE;;kDAAA;IA7BV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,IAAI,EAAE;gBACJ,MAAM,EAAE,aAAa;gBACrB,eAAe,EAAE,GAAG;gBACpB,eAAe,EAAE,KAAK;aACvB;YACD,WAAW,EAAE,mDAAmD;YAChE,SAAS,EAAE,CAAC,kDAAkD,CAAC;YAC/D,eAAe,EAAE,8BAAuB,CAAC,MAAM;SAChD,CAAC;;wBAAA;IAyDF,uBAAC;AAAD,CAAC,AAxDD,IAwDC;AAxDY,wBAAgB,mBAwD5B,CAAA;AAID;;;;;GAKG;AAUH;IAA+B,6BAAgB;IAC7C;QACE,iBAAO,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;IAC9B,CAAC;IAbH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,IAAI,EAAE;gBACJ,MAAM,EAAE,aAAa;aACtB;YACD,WAAW,EAAE,mDAAmD;YAChE,SAAS,EAAE,CAAC,kDAAkD,CAAC;YAC/D,eAAe,EAAE,8BAAuB,CAAC,MAAM;SAChD,CAAC;;iBAAA;IAMF,gBAAC;AAAD,CAAC,AALD,CAA+B,gBAAgB,GAK9C;AALY,iBAAS,YAKrB,CAAA","sourcesContent":["import {\n  Component,\n  ChangeDetectionStrategy,\n  HostBinding,\n  Input\n} from '@angular/core';\n\n\n// TODO(josephperrott): Benchpress tests.\n\n\n/**\n * <md-progress-circle> component.\n */\n@Component({\n  selector: 'md-progress-circle',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n  },\n  templateUrl: './components/progress-circle/progress-circle.html',\n  styleUrls: ['./components/progress-circle/progress-circle.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdProgressCircle {\n  /**\n   * Value of the progress circle.\n   *\n   * Input:number, defaults to 0.\n   * _value is bound to the host as the attribute aria-valuenow.\n   */\n  @HostBinding('attr.aria-valuenow')\n  @Input('value')\n  _value: number = 0;\n\n  /**\n   * Mode of the progress circle\n   *\n   * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n   * mode is bound to the host as the attribute host.\n   */\n  @HostBinding('attr.mode')\n  @Input() mode: 'determinate' | 'indeterminate' = 'determinate';\n\n\n  /**\n   * Gets the current stroke dash offset to represent the progress circle.\n   *\n   * The stroke dash offset specifies the distance between dashes in the circle's stroke.\n   * Setting the offset to a percentage of the total circumference of the circle, fills this\n   * percentage of the overall circumference of the circle.\n   */\n  strokeDashOffset() {\n    // To determine how far the offset should be, we multiple the current percentage by the\n    // total circumference.\n\n    // The total circumference is calculated based on the radius we use, 45.\n    // PI * 2 * 45\n    return 251.3274 * (100 - this._value) / 100;\n  }\n\n\n  /** Gets the progress value, returning the clamped value. */\n  get value() {\n    return this._value;\n  }\n\n\n  /** Sets the progress value, clamping before setting the internal value. */\n  set value(v: number) {\n    if (v != null) {\n      this._value = MdProgressCircle.clamp(v);\n    }\n  }\n\n\n  /** Clamps a value to be between 0 and 100. */\n  static clamp(v: number) {\n    return Math.max(0, Math.min(100, v));\n  }\n}\n\n\n\n/**\n * <md-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-circle> instance.\n */\n@Component({\n  selector: 'md-spinner',\n  host: {\n    'role': 'progressbar',\n  },\n  templateUrl: './components/progress-circle/progress-circle.html',\n  styleUrls: ['./components/progress-circle/progress-circle.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdSpinner extends MdProgressCircle {\n  constructor() {\n    super();\n    this.mode = 'indeterminate';\n  }\n}\n"]}