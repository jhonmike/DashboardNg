{"version":3,"file":"grid-list.js","sourceRoot":"","sources":["grid-list.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer,\n  ElementRef\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {\n    TileStyler,\n    FitTileStyler,\n    RatioTileStyler,\n    FixedTileStyler\n} from './tile-styler';\nimport {MdGridListColsError} from './grid-list-errors';\nimport {Dir} from '../../core/rtl/dir';\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MD_FIT_MODE = 'fit';\n\n@Component({\n  selector: 'md-grid-list',\n  host: { 'role': 'list' },\n  templateUrl: './components/grid-list/grid-list.html',\n  styleUrls: ['./components/grid-list/grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MdGridTile) private _tiles: QueryList<MdGridTile>;\n\n  constructor(\n      private _renderer: Renderer,\n      private _element: ElementRef,\n      private _dir: Dir) {}\n\n  @Input()\n  get cols() {\n    return this._cols;\n  }\n\n  set cols(value: any) {\n    this._cols = coerceToNumber(value);\n  }\n\n  @Input('gutterSize')\n  get gutterSize() {\n    return this._gutter;\n  }\n\n  set gutterSize(value: any) {\n    this._gutter = coerceToString(value);\n  }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n\n  /** @internal */\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   * @internal\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw new MdGridListColsError();\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(): void {\n    if (this._rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.match(/:/g)) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    let tiles = this._tiles.toArray();\n    let tracker = new TileCoordinator(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, this._dir);\n\n    for (let i = 0; i < tiles.length; i++) {\n      let pos = tracker.positions[i];\n      let tile = tiles[i];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    }\n    this.setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /**\n   * Sets style on the main grid-list element, given the style name and value.\n   * @internal\n   */\n  setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\n}\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @internal\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @internal\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n\nexport const MD_GRID_LIST_DIRECTIVES: any[] = [MdGridList, MdGridTile];\n"]}