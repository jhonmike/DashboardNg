{"version":3,"file":"radio_dispatcher.js","sourceRoot":"","sources":["radio_dispatcher.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AAIzC;;;;;GAKG;AAEH;IAIE;QACE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,iFAAiF;IACjF,kCAAM,GAAN,UAAO,IAAY;QACjB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,EAAd,CAAc,CAAC,CAAC;IACtD,CAAC;IAED,2DAA2D;IAC3D,kCAAM,GAAN,UAAO,QAAgC;QACrC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAjBH;QAAC,iBAAU,EAAE;;yBAAA;IAkBb,wBAAC;AAAD,CAAC,AAjBD,IAiBC;AAjBY,yBAAiB,oBAiB7B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\n\n\n\n/**\n * Class for radio buttons to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n */\n@Injectable()\nexport class MdRadioDispatcher {\n  // TODO(jelbourn): Change this to TypeScript syntax when supported.\n  private _listeners: Function[];\n\n  constructor() {\n    this._listeners = [];\n  }\n\n  /** Notify other radio buttons that selection for the given name has been set. */\n  notify(name: string) {\n    this._listeners.forEach(listener => listener(name));\n  }\n\n  /** Listen for future changes to radio button selection. */\n  listen(listener: (name: string) => void) {\n    this._listeners.push(listener);\n  }\n}\n"]}