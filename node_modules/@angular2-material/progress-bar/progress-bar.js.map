{"version":3,"file":"progress-bar.js","sourceRoot":"","sources":["progress-bar.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AAGvB,yCAAyC;AACzC,kEAAkE;AAGlE;;GAEG;AAYH;IAAA;QACE;;;;WAIG;QACK,WAAM,GAAW,CAAC,CAAC;QAW3B;;;;WAIG;QACK,iBAAY,GAAW,CAAC,CAAC;QAUjC;;;;;;WAMG;QAGH,SAAI,GAAyD,aAAa,CAAC;IA2B7E,CAAC;IA3DC,sBAAI,gCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aACD,UAAU,CAAS;YACjB,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5C,CAAC;;;OAHA;IAaD,sBAAI,sCAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;aACD,UAAgB,CAAS;YACvB,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAClD,CAAC;;;OAHA;IAmBD,iFAAiF;IACjF,wCAAgB,GAAhB;QACE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QAC7B,MAAM,CAAC,YAAU,KAAK,MAAG,CAAC;IAC5B,CAAC;IAGD;;;OAGG;IACH,uCAAe,GAAf;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YACnC,MAAM,CAAC,YAAU,KAAK,MAAG,CAAC;QAC5B,CAAC;IACH,CAAC;IAGD,sEAAsE;IAC/D,mBAAK,GAAZ,UAAa,CAAS,EAAE,GAAO,EAAE,GAAS;QAAlB,mBAAO,GAAP,OAAO;QAAE,mBAAS,GAAT,SAAS;QACxC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC;IA5DD;QAAC,YAAK,EAAE;QACP,kBAAW,CAAC,oBAAoB,CAAC;;8CAAA;IAelC;QAAC,YAAK,EAAE;;oDAAA;IAgBR;QAAC,YAAK,EAAE;QACP,kBAAW,CAAC,WAAW,CAAC;;+CAAA;IAnD3B;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,IAAI,EAAE;gBACJ,MAAM,EAAE,aAAa;gBACrB,eAAe,EAAE,GAAG;gBACpB,eAAe,EAAE,KAAK;aACvB;YACD,WAAW,EAAE,6CAA6C;YAC1D,SAAS,EAAE,CAAC,4CAA4C,CAAC;YACzD,eAAe,EAAE,8BAAuB,CAAC,MAAM;SAChD,CAAC;;qBAAA;IAqEF,oBAAC;AAAD,CAAC,AApED,IAoEC;AApEY,qBAAa,gBAoEzB,CAAA","sourcesContent":["import {\n    Component,\n    ChangeDetectionStrategy,\n    HostBinding,\n    Input,\n} from '@angular/core';\n\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <md-progress-bar> component.\n */\n@Component({\n  selector: 'md-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n  },\n  templateUrl: './components/progress-bar/progress-bar.html',\n  styleUrls: ['./components/progress-bar/progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdProgressBar {\n  /**\n   * Value of the progressbar.\n   *\n   * Defaults to zero. Mirrored to aria-valuenow.\n   */\n  private _value: number = 0;\n  @Input()\n  @HostBinding('attr.aria-valuenow')\n  get value() {\n    return this._value;\n  }\n  set value(v: number) {\n    this._value = MdProgressBar.clamp(v || 0);\n  }\n\n\n  /**\n   * Buffer value of the progress bar.\n   *\n   * Defaults to zero.\n   */\n  private _bufferValue: number = 0;\n  @Input()\n  get bufferValue() {\n    return this._bufferValue;\n  }\n  set bufferValue(v: number) {\n    this._bufferValue = MdProgressBar.clamp(v || 0);\n  }\n\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input()\n  @HostBinding('attr.mode')\n  mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  primaryTransform() {\n    let scale = this.value / 100;\n    return `scaleX(${scale})`;\n  }\n\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return `scaleX(${scale})`;\n    }\n  }\n\n\n  /** Clamps a value to be between two numbers, by default 0 and 100. */\n  static clamp(v: number, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n  }\n}\n"]}