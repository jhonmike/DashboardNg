{"version":3,"file":"progress-bar.spec.js","sourceRoot":"","sources":["progress-bar.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {beforeEach, describe, expect, inject, it} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdProgressBar} from './progress-bar';\n\n\nexport function main() {\n  describe('MdProgressBar', () => {\n    let builder: TestComponentBuilder;\n\n    beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n      builder = tcb;\n    }));\n\n    it('should apply a mode of \"determinate\" if no mode is provided.', (done: () => void) => {\n      builder\n          .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n          .createAsync(TestApp)\n          .then((fixture) => {\n            fixture.detectChanges();\n            let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n            expect(progressElement.componentInstance.mode).toBe('determinate');\n            done();\n          });\n    });\n\n    it('should not modify the mode if a valid mode is provided.', (done: () => void) => {\n      builder\n          .overrideTemplate(TestApp, '<md-progress-bar mode=\"buffer\"></md-progress-bar>')\n          .createAsync(TestApp)\n          .then((fixture) => {\n            fixture.detectChanges();\n            let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n            expect(progressElement.componentInstance.mode).toBe('buffer');\n            done();\n          });\n    });\n\n    it('should define default values for value and bufferValue attributes', (done: () => void) => {\n      builder\n          .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n          .createAsync(TestApp)\n          .then((fixture) => {\n            fixture.detectChanges();\n            let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n            expect(progressElement.componentInstance.value).toBe(0);\n            expect(progressElement.componentInstance.bufferValue).toBe(0);\n            done();\n          });\n    });\n\n    it('should clamp value and bufferValue between 0 and 100', (done: () => void) => {\n      builder\n          .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n          .createAsync(TestApp)\n          .then((fixture) => {\n            fixture.detectChanges();\n            let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n            let progressComponent = progressElement.componentInstance;\n\n            progressComponent.value = 50;\n            expect(progressComponent.value).toBe(50);\n\n            progressComponent.value = 999;\n            expect(progressComponent.value).toBe(100);\n\n            progressComponent.value = -10;\n            expect(progressComponent.value).toBe(0);\n\n            progressComponent.bufferValue = -29;\n            expect(progressComponent.bufferValue).toBe(0);\n\n            progressComponent.bufferValue = 9;\n            expect(progressComponent.bufferValue).toBe(9);\n\n            progressComponent.bufferValue = 1320;\n            expect(progressComponent.bufferValue).toBe(100);\n            done();\n          });\n    });\n\n    it('should return the transform attribute for bufferValue and mode', (done: () => void) => {\n      builder\n          .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n          .createAsync(TestApp)\n          .then((fixture) => {\n            fixture.detectChanges();\n            let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n            let progressComponent = progressElement.componentInstance;\n\n            expect(progressComponent.primaryTransform()).toBe('scaleX(0)');\n            expect(progressComponent.bufferTransform()).toBe(undefined);\n\n            progressComponent.value = 40;\n            expect(progressComponent.primaryTransform()).toBe('scaleX(0.4)');\n            expect(progressComponent.bufferTransform()).toBe(undefined);\n\n            progressComponent.value = 35;\n            progressComponent.bufferValue = 55;\n            expect(progressComponent.primaryTransform()).toBe('scaleX(0.35)');\n            expect(progressComponent.bufferTransform()).toBe(undefined);\n\n            progressComponent.mode = 'buffer';\n            expect(progressComponent.primaryTransform()).toBe('scaleX(0.35)');\n            expect(progressComponent.bufferTransform()).toBe('scaleX(0.55)');\n\n\n            progressComponent.value = 60;\n            progressComponent.bufferValue = 60;\n            expect(progressComponent.primaryTransform()).toBe('scaleX(0.6)');\n            expect(progressComponent.bufferTransform()).toBe('scaleX(0.6)');\n            done();\n          });\n    });\n  });\n}\n\n\n/** Test component that contains an MdButton. */\n@Component({\n  directives: [MdProgressBar],\n  template: '',\n})\nclass TestApp {}\n"]}