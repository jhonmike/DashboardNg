{"version":3,"file":"dir.js","sourceRoot":"","sources":["dir.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkE,eAAe,CAAC,CAAA;AAIlF;;;;;GAKG;AAMH;IAAA;QACwB,SAAI,GAAoB,KAAK,CAAC;QAE1C,cAAS,GAAG,IAAI,mBAAY,EAAQ,CAAC;IAgBjD,CAAC;IAbC,sBAAI,oBAAG;aAAP;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAkB;YACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC;;;OAPA;IASD,sBAAI,sBAAK;aAAT,cAA+B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD,UAAU,CAAkB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;;OADE;IAhBjD;QAAC,YAAK,CAAC,KAAK,CAAC;;qCAAA;IAEb;QAAC,aAAM,EAAE;;0CAAA;IAET;QAAC,kBAAW,CAAC,UAAU,CAAC;;kCAAA;IAV1B;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,OAAO;YACjB,iGAAiG;YACjG,QAAQ,EAAE,WAAW;SACtB,CAAC;;WAAA;IAoBF,UAAC;AAAD,CAAC,AAnBD,IAmBC;AAnBY,WAAG,MAmBf,CAAA","sourcesContent":["import {Directive, HostBinding, Output, Input, EventEmitter} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n\n/**\n * Directive to listen to changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\n@Directive({\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n})\nexport class Dir {\n  @Input('dir') private _dir: LayoutDirection = 'ltr';\n\n  @Output() dirChange = new EventEmitter<void>();\n\n  @HostBinding('attr.dir')\n  get dir(): LayoutDirection {\n    return this._dir;\n  }\n  set dir(v: LayoutDirection) {\n    let old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit(null);\n    }\n  }\n\n  get value(): LayoutDirection { return this.dir; }\n  set value(v: LayoutDirection) { this.dir = v; }\n}\n"]}