{"version":3,"file":"portal.spec.js","sourceRoot":"","sources":["portal.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,wBAQO,uBAAuB,CAAC,CAAA;AAC/B,wBAAqD,2BAA2B,CAAC,CAAA;AACjF,qBAMO,eAAe,CAAC,CAAA;AACvB,kCAA2D,qBAAqB,CAAC,CAAA;AACjF,uBAAsC,UAAU,CAAC,CAAA;AACjD,gCAA4B,mBAAmB,CAAC,CAAA;AAGhD;IACE,kBAAQ,CAAC,SAAS,EAAE;QAClB,IAAI,OAA6B,CAAC;QAElC,oBAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;YAClE,OAAO,GAAG,GAAG,CAAC;QAChB,CAAC,CAAC,CAAC,CAAC;QAEJ,kBAAQ,CAAC,qBAAqB,EAAE;YAC9B,YAAE,CAAC,yCAAyC,EAAE,mBAAS,CAAC;gBACtD,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAElB,gDAAgD;gBAChD,IAAI,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBACjE,gBAAgB,CAAC,cAAc,GAAG,IAAI,wBAAe,CAAC,QAAQ,CAAC,CAAC;gBAChE,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,sCAAsC;gBACtC,yBAAe,EAAE,CAAC;gBAElB,6DAA6D;gBAC7D,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;gBAChF,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,iCAAiC,EAAE,mBAAS,CAAC;gBAC9C,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAElB,IAAI,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAEjE,8EAA8E;gBAC9E,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,+CAA+C;gBAC/C,gBAAgB,CAAC,cAAc,GAAG,gBAAgB,CAAC,UAAU,CAAC;gBAC9D,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,sCAAsC;gBACtC,yBAAe,EAAE,CAAC;gBAElB,6DAA6D;gBAC7D,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;gBAChF,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,oDAAoD,EAAE,mBAAS,CAAC;gBACjE,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAElB,IAAI,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAEjE,8EAA8E;gBAC9E,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,qEAAqE;gBACrE,gBAAgB,CAAC,cAAc,GAAG,gBAAgB,CAAC,SAAS,CAAC;gBAC7D,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,sCAAsC;gBACtC,yBAAe,EAAE,CAAC;gBAElB,6DAA6D;gBAC7D,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;gBAChF,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,gDAAgD,EAAE,mBAAS,CAAC;gBAC7D,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAElB,IAAI,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAEjE,8EAA8E;gBAC9E,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,+CAA+C;gBAC/C,gBAAgB,CAAC,cAAc,GAAG,gBAAgB,CAAC,iBAAiB,CAAC;gBACrE,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,sCAAsC;gBACtC,yBAAe,EAAE,CAAC;gBAElB,iFAAiF;gBACjF,8BAA8B;gBAC9B,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,6DAA6D;gBAC7D,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;gBAChF,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAEtD,mCAAmC;gBACnC,gBAAgB,CAAC,KAAK,GAAG,OAAO,CAAC;gBACjC,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,+DAA+D;gBAC/D,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,mCAAmC,EAAE,mBAAS,CAAC;gBAChD,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAElB,IAAI,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAEjE,8EAA8E;gBAC9E,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,gDAAgD;gBAChD,gBAAgB,CAAC,cAAc,GAAG,gBAAgB,CAAC,SAAS,CAAC;gBAC7D,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,sCAAsC;gBACtC,yBAAe,EAAE,CAAC;gBAClB,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,6DAA6D;gBAC7D,IAAI,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;gBAChF,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAEnD,gBAAgB,CAAC,cAAc,GAAG,IAAI,wBAAe,CAAC,QAAQ,CAAC,CAAC;gBAChE,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,kBAAQ,CAAC,eAAe,EAAE;YACxB,IAAI,eAAuC,CAAC;YAC5C,IAAI,oBAAsC,CAAC;YAC3C,IAAI,cAA2B,CAAC;YAChC,IAAI,IAAmB,CAAC;YAExB,oBAAU,CAAC,gBAAM,CAAC,CAAC,6BAAsB,CAAC,EAAE,UAAC,GAA2B;gBACtE,eAAe,GAAG,GAAG,CAAC;YACxB,CAAC,CAAC,CAAC,CAAC;YAEJ,oBAAU,CAAC;gBACT,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC/C,IAAI,GAAG,IAAI,+BAAa,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YAEH,YAAE,CAAC,6CAA6C,EAAE,mBAAS,CAAC;gBAC1D,OAAO,CAAC,WAAW,CAAC,kCAAkC,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAClE,oBAAoB,GAAG,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;gBACpE,CAAC,CAAC,CAAC;gBAEH,yBAAe,EAAE,CAAC;gBAElB,IAAI,MAAM,GAAG,IAAI,wBAAe,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;gBAEjE,IAAI,iBAA2B,CAAC;gBAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;oBAC1B,iBAAiB,GAAG,GAAG,CAAC,QAAQ,CAAC;gBACnC,CAAC,CAAC,CAAC;gBAEH,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBACrD,gBAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAEtD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,4CAA4C,EAAE,mBAAS,CAAC;gBACzD,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAClB,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrD,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,2DAA2D,EAAE,mBAAS,CAAC;gBACxE,IAAI,UAA2C,CAAC;gBAChD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAElB,IAAI,gBAAgB,GAAG,UAAU,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAEjE,8EAA8E;gBAC9E,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,6BAA6B;gBAC7B,gBAAgB,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAChD,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,sCAAsC;gBACtC,yBAAe,EAAE,CAAC;gBAElB,iFAAiF;gBACjF,8BAA8B;gBAC9B,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,6DAA6D;gBAC7D,gBAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAEvD,mCAAmC;gBACnC,gBAAgB,CAAC,KAAK,GAAG,OAAO,CAAC;gBACjC,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,+DAA+D;gBAC/D,gBAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBAE3D,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,gBAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC,CAAC;YAEJ,YAAE,CAAC,mCAAmC,EAAE,mBAAS,CAAC;gBAChD,OAAO,CAAC,WAAW,CAAC,kCAAkC,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAClE,oBAAoB,GAAG,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;gBACpE,CAAC,CAAC,CAAC;gBAEH,yBAAe,EAAE,CAAC;gBAElB,IAAI,UAA2C,CAAC;gBAEhD,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;oBAC7C,UAAU,GAAG,OAAO,CAAC;gBACvB,CAAC,CAAC,CAAC;gBAEH,iDAAiD;gBACjD,yBAAe,EAAE,CAAC;gBAClB,UAAU,CAAC,aAAa,EAAE,CAAC;gBAE3B,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACpD,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAEpD,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,yBAAe,EAAE,CAAC;gBAElB,IAAI,CAAC,MAAM,CAAC,IAAI,wBAAe,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC,CAAC;gBACjE,yBAAe,EAAE,CAAC;gBAElB,gBAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAhSe,YAAI,OAgSnB,CAAA;AAGD,oDAAoD;AAKpD;IAAA;IAAgB,CAAC;IAJjB;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,QAAQ,EAAE,cAAc;SACzB,CAAC;;gBAAA;IACc,eAAC;AAAD,CAAC,AAAjB,IAAiB;AAEjB,6DAA6D;AAK7D;IACE,4CAAmB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAI,CAAC;IAL5D;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;YAC5B,QAAQ,EAAE,cAAc;SACzB,CAAC;;0CAAA;IAGF,yCAAC;AAAD,CAAC,AAFD,IAEC;AAGD,uFAAuF;AAgBvF;IAAA;QAGE,UAAK,GAAW,QAAQ,CAAC;IAa3B,CAAC;IAXC,sBAAI,qCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAI,oCAAS;aAAb;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;;;OAAA;IAED,sBAAI,4CAAiB;aAArB;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;;;OAAA;IAdD;QAAC,mBAAY,CAAC,2CAAuB,CAAC;;kDAAA;IAhBxC;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,8NAUT;YACD,UAAU,EAAE,CAAC,uCAAmB,EAAE,2CAAuB,CAAC;SAC3D,CAAC;;qBAAA;IAiBF,oBAAC;AAAD,CAAC,AAhBD,IAgBC","sourcesContent":["import {\n    it,\n    describe,\n    expect,\n    beforeEach,\n    inject,\n    fakeAsync,\n    flushMicrotasks\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {\n    Component,\n    ViewChildren,\n    QueryList,\n    ViewContainerRef,\n    DynamicComponentLoader\n} from '@angular/core';\nimport {TemplatePortalDirective, PortalHostDirective} from './portal-directives';\nimport {Portal, ComponentPortal} from './portal';\nimport {DomPortalHost} from './dom-portal-host';\n\n\nexport function main() {\n  describe('Portals', () => {\n    let builder: TestComponentBuilder;\n\n    beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n      builder = tcb;\n    }));\n\n    describe('PortalHostDirective', () => {\n      it('should load a component into the portal', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n\n        // Set the selectedHost to be a ComponentPortal.\n        let testAppComponent = appFixture.debugElement.componentInstance;\n        testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n        appFixture.detectChanges();\n\n        // Flush the attachment of the Portal.\n        flushMicrotasks();\n\n        // Expect that the content of the attached portal is present.\n        let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n        expect(hostContainer.textContent).toContain('Pizza');\n      }));\n\n      it('should load a <template> portal', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n\n        let testAppComponent = appFixture.debugElement.componentInstance;\n\n        // Detect changes initially so that the component's ViewChildren are resolved.\n        appFixture.detectChanges();\n\n        // Set the selectedHost to be a TemplatePortal.\n        testAppComponent.selectedPortal = testAppComponent.cakePortal;\n        appFixture.detectChanges();\n\n        // Flush the attachment of the Portal.\n        flushMicrotasks();\n\n        // Expect that the content of the attached portal is present.\n        let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n        expect(hostContainer.textContent).toContain('Cake');\n      }));\n\n      it('should load a <template> portal with the `*` sugar', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n\n        let testAppComponent = appFixture.debugElement.componentInstance;\n\n        // Detect changes initially so that the component's ViewChildren are resolved.\n        appFixture.detectChanges();\n\n        // Set the selectedHost to be a TemplatePortal (with the `*` syntax).\n        testAppComponent.selectedPortal = testAppComponent.piePortal;\n        appFixture.detectChanges();\n\n        // Flush the attachment of the Portal.\n        flushMicrotasks();\n\n        // Expect that the content of the attached portal is present.\n        let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n        expect(hostContainer.textContent).toContain('Pie');\n      }));\n\n      it('should load a <template> portal with a binding', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n\n        let testAppComponent = appFixture.debugElement.componentInstance;\n\n        // Detect changes initially so that the component's ViewChildren are resolved.\n        appFixture.detectChanges();\n\n        // Set the selectedHost to be a TemplatePortal.\n        testAppComponent.selectedPortal = testAppComponent.portalWithBinding;\n        appFixture.detectChanges();\n\n        // Flush the attachment of the Portal.\n        flushMicrotasks();\n\n        // Now that the portal is attached, change detection has to happen again in order\n        // for the bindings to update.\n        appFixture.detectChanges();\n\n        // Expect that the content of the attached portal is present.\n        let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n        expect(hostContainer.textContent).toContain('Banana');\n\n        // When updating the binding value.\n        testAppComponent.fruit = 'Mango';\n        appFixture.detectChanges();\n\n        // Expect the new value to be reflected in the rendered output.\n        expect(hostContainer.textContent).toContainError('Mango');\n      }));\n\n      it('should change the attached portal', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n\n        let testAppComponent = appFixture.debugElement.componentInstance;\n\n        // Detect changes initially so that the component's ViewChildren are resolved.\n        appFixture.detectChanges();\n\n        // Set the selectedHost to be a ComponentPortal.\n        testAppComponent.selectedPortal = testAppComponent.piePortal;\n        appFixture.detectChanges();\n\n        // Flush the attachment of the Portal.\n        flushMicrotasks();\n        appFixture.detectChanges();\n\n        // Expect that the content of the attached portal is present.\n        let hostContainer = appFixture.nativeElement.querySelector('.portal-container');\n        expect(hostContainer.textContent).toContain('Pie');\n\n        testAppComponent.selectedPortal = new ComponentPortal(PizzaMsg);\n        appFixture.detectChanges();\n\n        flushMicrotasks();\n\n        expect(hostContainer.textContent).toContain('Pizza');\n      }));\n    });\n\n    describe('DomPortalHost', function() {\n      let componentLoader: DynamicComponentLoader;\n      let someViewContainerRef: ViewContainerRef;\n      let someDomElement: HTMLElement;\n      let host: DomPortalHost;\n\n      beforeEach(inject([DynamicComponentLoader], (dcl: DynamicComponentLoader) => {\n        componentLoader = dcl;\n      }));\n\n      beforeEach(() => {\n        someDomElement = document.createElement('div');\n        host = new DomPortalHost(someDomElement, componentLoader);\n      });\n\n      it('should attach and detach a component portal', fakeAsync(() => {\n        builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\n          someViewContainerRef = fixture.componentInstance.viewContainerRef;\n        });\n\n        flushMicrotasks();\n\n        let portal = new ComponentPortal(PizzaMsg, someViewContainerRef);\n\n        let componentInstance: PizzaMsg;\n        portal.attach(host).then(ref => {\n          componentInstance = ref.instance;\n        });\n\n        flushMicrotasks();\n\n        expect(componentInstance).toBeAnInstanceOf(PizzaMsg);\n        expect(someDomElement.textContent).toContain('Pizza');\n\n        host.detach();\n        flushMicrotasks();\n\n        expect(someDomElement.innerHTML).toBe('');\n      }));\n\n      it('should attach and detach a template portal', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n        appFixture.detectChanges();\n\n        appFixture.componentInstance.cakePortal.attach(host);\n        flushMicrotasks();\n\n        expect(someDomElement.textContent).toContain('Cake');\n      }));\n\n      it('should attach and detach a template portal with a binding', fakeAsync(() => {\n        let appFixture: ComponentFixture<PortalTestApp>;\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n\n        let testAppComponent = appFixture.debugElement.componentInstance;\n\n        // Detect changes initially so that the component's ViewChildren are resolved.\n        appFixture.detectChanges();\n\n        // Attach the TemplatePortal.\n        testAppComponent.portalWithBinding.attach(host);\n        appFixture.detectChanges();\n\n        // Flush the attachment of the Portal.\n        flushMicrotasks();\n\n        // Now that the portal is attached, change detection has to happen again in order\n        // for the bindings to update.\n        appFixture.detectChanges();\n\n        // Expect that the content of the attached portal is present.\n        expect(someDomElement.textContent).toContain('Banana');\n\n        // When updating the binding value.\n        testAppComponent.fruit = 'Mango';\n        appFixture.detectChanges();\n\n        // Expect the new value to be reflected in the rendered output.\n        expect(someDomElement.textContent).toContainError('Mango');\n\n        host.detach();\n        expect(someDomElement.innerHTML).toBe('');\n      }));\n\n      it('should change the attached portal', fakeAsync(() => {\n        builder.createAsync(ArbitraryViewContainerRefComponent).then(fixture => {\n          someViewContainerRef = fixture.componentInstance.viewContainerRef;\n        });\n\n        flushMicrotasks();\n\n        let appFixture: ComponentFixture<PortalTestApp>;\n\n        builder.createAsync(PortalTestApp).then(fixture => {\n          appFixture = fixture;\n        });\n\n        // Flush the async creation of the PortalTestApp.\n        flushMicrotasks();\n        appFixture.detectChanges();\n\n        appFixture.componentInstance.piePortal.attach(host);\n        flushMicrotasks();\n\n        expect(someDomElement.textContent).toContain('Pie');\n\n        host.detach();\n        flushMicrotasks();\n\n        host.attach(new ComponentPortal(PizzaMsg, someViewContainerRef));\n        flushMicrotasks();\n\n        expect(someDomElement.textContent).toContain('Pizza');\n      }));\n    });\n  });\n}\n\n\n/** Simple component for testing ComponentPortal. */\n@Component({\n  selector: 'pizza-msg',\n  template: '<p>Pizza</p>',\n})\nclass PizzaMsg {}\n\n/** Simple component to grab an arbitrary ViewContainerRef */\n@Component({\n  selector: 'some-placeholder',\n  template: '<p>Hello</p>'\n})\nclass ArbitraryViewContainerRefComponent {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n\n/** Test-bed component that contains a portal host and a couple of template portals. */\n@Component({\n  selector: 'portal-test',\n  template: `\n  <div class=\"portal-container\">\n    <template [portalHost]=\"selectedPortal\"></template>\n  </div>\n\n  <template portal>Cake</template>\n\n  <div *portal>Pie</div>\n\n  <template portal> {{fruit}} </template>\n  `,\n  directives: [PortalHostDirective, TemplatePortalDirective],\n})\nclass PortalTestApp {\n  @ViewChildren(TemplatePortalDirective) portals: QueryList<TemplatePortalDirective>;\n  selectedPortal: Portal<any>;\n  fruit: string = 'Banana';\n\n  get cakePortal() {\n    return this.portals.first;\n  }\n\n  get piePortal() {\n    return this.portals.toArray()[1];\n  }\n\n  get portalWithBinding() {\n    return this.portals.toArray()[2];\n  }\n}\n"]}