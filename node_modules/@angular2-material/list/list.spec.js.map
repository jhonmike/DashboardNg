{"version":3,"file":"list.spec.js","sourceRoot":"","sources":["list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\n\nimport {MD_LIST_DIRECTIVES} from './list';\n\nexport function main() {\n  describe('MdList', () => {\n    let builder: TestComponentBuilder;\n\n    beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n      builder = tcb;\n    }));\n\n    it('should not apply any class to a list without lines', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item>\n            Paprika\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          let listItem = fixture.debugElement.query(By.css('md-list-item'));\n          fixture.detectChanges();\n          expect(listItem.nativeElement.className).toBe('');\n          done();\n      });\n    });\n\n    it('should apply md-2-line class to lists with two lines', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            <img src=\"\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          fixture.detectChanges();\n          let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n          expect(listItems[0].nativeElement.className).toBe('md-2-line');\n          expect(listItems[1].nativeElement.className).toBe('md-2-line');\n          done();\n      });\n    });\n\n    it('should apply md-3-line class to lists with three lines', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n            <p md-line>Some other text</p>\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          fixture.detectChanges();\n          let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n          expect(listItems[0].nativeElement.className).toBe('md-3-line');\n          expect(listItems[1].nativeElement.className).toBe('md-3-line');\n          done();\n      });\n    });\n\n    it('should apply md-list-avatar class to list items with avatars', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item>\n            <img src=\"\" md-list-avatar>\n            Paprika\n          </md-list-item>\n         <md-list-item>\n            Pepper\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          fixture.detectChanges();\n          let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n          expect(listItems[0].nativeElement.className).toBe('md-list-avatar');\n          expect(listItems[1].nativeElement.className).toBe('');\n          done();\n      });\n    });\n\n    it('should not clear custom classes provided by user', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item class=\"test-class\" *ngFor=\"let item of items\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          fixture.detectChanges();\n          let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n          expect(listItems[0].nativeElement.classList.contains('test-class')).toBe(true);\n          done();\n      });\n    });\n\n    it('should update classes if number of lines change', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n            <p md-line *ngIf=\"showThirdLine\">Some other text</p>\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          fixture.debugElement.componentInstance.showThirdLine = false;\n          fixture.detectChanges();\n          let listItem = fixture.debugElement.children[0].query(By.css('md-list-item'));\n          expect(listItem.nativeElement.className).toBe('md-2-line');\n\n          fixture.debugElement.componentInstance.showThirdLine = true;\n          fixture.detectChanges();\n          setTimeout(() => {\n            expect(listItem.nativeElement.className).toBe('md-3-line');\n            done();\n          });\n      });\n    });\n\n    it('should add aria roles properly', (done: () => void) => {\n      var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            {{item.name}}\n          </md-list-item>\n        </md-list>\n      `;\n      return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          fixture.detectChanges();\n          let list = fixture.debugElement.children[0];\n          let listItem = fixture.debugElement.children[0].query(By.css('md-list-item'));\n          expect(list.nativeElement.getAttribute('role')).toBe('list');\n          expect(listItem.nativeElement.getAttribute('role')).toBe('listitem');\n          done();\n      });\n    });\n\n  });\n}\n\n@Component({\n  selector: 'test-list',\n  template: ``,\n  directives: [MD_LIST_DIRECTIVES]\n})\nclass TestList {\n  items: any[] = [\n    {'name': 'Paprika', 'description': 'A seasoning'},\n    {'name': 'Pepper', 'description': 'Another seasoning'}\n  ];\n  showThirdLine: boolean = false;\n}\n"]}